version: '3.8'

services:
    web:
        build: 
            context: ./spotify_app/
            dockerfile: Dockerfile
        container_name: sp_service
        env_file:
            - .env
        restart: always
        volumes:
            - .:/sp_service
        ports:
            - "8000:8000" # webserver
            - "8888:8888" # iptyhon notebook
        depends_on:
            - db
            - redis

    celery:
        restart: always
        build: 
            context: ./spotify_app/
            dockerfile: Dockerfile
        command: bash -c " cd spotify_app && celery -A proj worker --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
        container_name: celery
        volumes:
            - .:/sp_service
        env_file:
            - .env
        environment:
            # - DEBUG=1
            - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
            - CELERY_BROKER=${CELERY_BROKER}
            - CELERY_BACKEND=${CELERY_BACKEND}
        depends_on:
            - web
            - redis

    celery_beat:
        restart: always
        build: 
            context: ./spotify_app/
            dockerfile: Dockerfile
        container_name: celery_beat
        volumes:
            - .:/sp_service
        depends_on:
            - db
            - redis
            - celery
        command: bash -c "cd spotify_app && celery -A proj worker --beat --scheduler django --loglevel=info"

    db:
        image: postgres
        container_name: db
        restart: always
        env_file:
            - .env
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USE=${POSTGRES_USER}
            - POSTGRES_PASSWOR=${POSTGRES_PASSWORD}
            - PGDATA="/var/lib/postgresql/data/pgdata"
        ports:
            - "5432:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data/

    redis:
        image: "redis:alpine"
    
    frontend:
        build:
            context: ./frontend/
            dockerfile: Dockerfile
        restart: always
        command : npm start
        container_name: frontend
        ports:
            - "3000:3000"
        depends_on:
            - web
        volumes:
            - ./frontend:/frontend
            - ./frontend/node_modules
    
    proxy:
      build:
        context: ./spotify_app/proxy
      restart: always
      depends_on:
        - web
      ports:
        - 80:8000

volumes:
    pgdata:


